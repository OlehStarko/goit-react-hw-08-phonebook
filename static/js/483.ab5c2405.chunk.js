"use strict";(self.webpackChunkreact_homework_template=self.webpackChunkreact_homework_template||[]).push([[483],{483:function(e,t,n){n.r(t),n.d(t,{default:function(){return _}});var r=n(434),a=n(693),c=n(870),s=n(791),o=n(329),i=function(e){var t=e.name,n=e.number,r=e.handleDeleteContact,c=e.id;return(0,o.jsxs)("li",{className:a.Z.contact__item,children:[(0,o.jsxs)("p",{className:a.Z.name_text,children:[t,": "]}),(0,o.jsx)("p",{className:a.Z.number_text,children:n}),(0,o.jsx)("button",{className:a.Z.delete__button,type:"button",name:c,onClick:function(){r(c)}})]})},u=function(){var e=(0,r.I0)(),t=(0,r.v9)((function(e){return e.user.user.name})),n=(0,r.v9)((function(e){return e.contacts.items})),u=(0,r.v9)((function(e){return e.contacts.filter}));(0,s.useEffect)((function(){t&&e(c.Z.getContacts())}),[e,t]);var l=(0,s.useMemo)((function(){return n.filter((function(e){return e.name.toLowerCase().includes(u.toLowerCase())}))}),[n,u]),m=function(t){e(c.Z.deleteContact(t))};return(0,o.jsx)("ul",{className:a.Z.contact__list,children:l.map((function(e){var t=e.id,n=e.name,r=e.number;return(0,o.jsxs)(i,{className:a.Z.contact__item,name:n,number:r,id:t,handleDeleteContact:m,children:[(0,o.jsxs)("p",{children:[n,": ",r]}),(0,o.jsx)("button",{className:a.Z.delete__button,type:"button",name:t,handleDeleteContact:m})]},"".concat(t))}))})},l=n(181);function m(e,t){var n="undefined"!==typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=(0,l.Z)(e))||t&&e&&"number"===typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var c,s=!0,o=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return s=e.done,e},e:function(e){o=!0,c=e},f:function(){try{s||null==n.return||n.return()}finally{if(o)throw c}}}}var d=n(861),f=n(885),p=n(757),h=n.n(p),b=function(){var e=(0,s.useState)(""),t=(0,f.Z)(e,2),n=t[0],i=t[1],u=(0,s.useState)(""),l=(0,f.Z)(u,2),p=l[0],b=l[1],v=(0,r.I0)(),x=(0,r.v9)((function(e){return e.contacts.items})),_=function(e){var t=e.currentTarget,n=t.name,r=t.value;switch(n){case"name":i(r);break;case"number":b(r);break;default:return}},Z=function(){var e=(0,d.Z)(h().mark((function e(t){var r,a,s;return h().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.preventDefault(),r={name:n,number:p},a=m(x),e.prev=3,a.s();case 5:if((s=a.n()).done){e.next=14;break}if(s.value.name.toLowerCase()!==r.name.toLocaleLowerCase()){e.next=12;break}return alert("\u041a\u043e\u043d\u0442\u0430\u043a\u0442 \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442"),i(""),b(""),e.abrupt("return");case 12:e.next=5;break;case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(3),a.e(e.t0);case 19:return e.prev=19,a.f(),e.finish(19);case 22:return e.next=24,v(c.Z.addContact(r));case 24:return e.next=26,v(c.Z.getContacts());case 26:i(""),b("");case 28:case"end":return e.stop()}}),e,null,[[3,16,19,22]])})));return function(t){return e.apply(this,arguments)}}();return(0,o.jsx)("div",{className:a.Z.form__container,children:(0,o.jsxs)("form",{onSubmit:Z,children:[(0,o.jsxs)("label",{children:[(0,o.jsx)("p",{className:a.Z.input__description,children:"Name"}),(0,o.jsx)("input",{className:a.Z.form__input,type:"text",name:"name",placeholder:"Contact name","aria-label":"Input for your name",value:n,onChange:_,pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"\u0418\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432, \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430, \u0442\u0438\u0440\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \u0438 \u0442. \u043f.",required:!0})]}),(0,o.jsxs)("label",{children:[(0,o.jsx)("p",{className:a.Z.input__description,children:"Number"}),(0,o.jsx)("input",{className:a.Z.form__input,type:"tel",name:"number",placeholder:"Phone number",value:p,"aria-label":"Input for your phone number",onChange:_,pattern:"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}",title:"\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 11-12 \u0446\u0438\u0444\u0440 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0446\u0438\u0444\u0440\u044b, \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \u0442\u0438\u0440\u0435, \u043f\u0443\u0437\u0430\u0442\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438 \u0438 \u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c\u0441\u044f \u0441 +",required:!0})]}),(0,o.jsx)("div",{children:(0,o.jsx)("button",{type:"submit",className:a.Z.add__button,children:"Add contact"})})]})})},v=n(531);function x(){var e=(0,r.I0)();return(0,o.jsxs)("label",{className:a.Z.filter__container,children:[(0,o.jsx)("p",{className:a.Z.input__description,children:" Find contacts by name"}),(0,o.jsx)("input",{className:a.Z.filter__input,type:"filter",name:"filter",placeholder:"Find...",onChange:function(t){e((0,v.Tv)({text:t.target.value}))},pattern:"^[a-zA-Z\u0430-\u044f\u0410-\u042f]+(([' -][a-zA-Z\u0430-\u044f\u0410-\u042f ])?[a-zA-Z\u0430-\u044f\u0410-\u042f]*)*$",title:"\u0418\u043c\u044f \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0431\u0443\u043a\u0432, \u0430\u043f\u043e\u0441\u0442\u0440\u043e\u0444\u0430, \u0442\u0438\u0440\u0435 \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan \u0438 \u0442. \u043f.",required:!0})]})}var _=function(){var e=(0,r.v9)((function(e){return e.contacts.items}));return(0,o.jsxs)("div",{className:a.Z.contact_container,children:[(0,o.jsx)("h1",{className:a.Z.form__title,children:"Phonebook"}),(0,o.jsx)(b,{}),e.length>0&&(0,o.jsx)(x,{}),(0,o.jsx)(u,{})]})}}}]);
//# sourceMappingURL=483.ab5c2405.chunk.js.map