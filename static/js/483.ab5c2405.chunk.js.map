{"version":3,"file":"static/js/483.ab5c2405.chunk.js","mappings":"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","sources":["components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/Form/Form.jsx","components/Filter/Filter.jsx","Pages/Contacts/Contacts.jsx"],"sourcesContent":["import css from '../css/phonebook.module.css';\n\nconst ContactItem = ({ name, number, handleDeleteContact, id }) => {\n  return (\n    <li className={css.contact__item}>\n      <p className={css.name_text}>{name}: </p>\n      <p className={css.number_text}>{number}</p>\n\n      <button\n        className={css.delete__button}\n        type=\"button\"\n        name={id}\n        onClick={() => {\n          handleDeleteContact(id);\n        }}\n      ></button>\n    </li>\n  );\n};\n\nexport default ContactItem;\n","import css from '../css/phonebook.module.css';\nimport operation from '../../redux/store/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useMemo } from 'react';\nimport ContactItem from 'components/ContactItem/ContactItem';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const userName = useSelector(state => state.user.user.name);\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n\n  useEffect(() => {\n    if (!userName) {\n      return;\n    }\n    dispatch(operation.getContacts());\n  }, [dispatch, userName]);\n\n  const visibleContacts = useMemo(() => {\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }, [contacts, filter]);\n\n  const handleDeleteContact = id => {\n    dispatch(operation.deleteContact(id));\n  };\n\n  return (\n    <ul className={css.contact__list}>\n      {visibleContacts.map(({ id, name, number }) => (\n        <ContactItem\n          className={css.contact__item}\n          key={`${id}`}\n          name={name}\n          number={number}\n          id={id}\n          handleDeleteContact={handleDeleteContact}\n        >\n          <p>\n            {name}: {number}\n          </p>\n          <button\n            className={css.delete__button}\n            type=\"button\"\n            name={id}\n            handleDeleteContact={handleDeleteContact}\n          ></button>\n        </ContactItem>\n      ))}\n    </ul>\n  );\n};\nexport default ContactsList;\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { useState } from 'react';\nimport css from '../css/phonebook.module.css';\nimport operations from 'redux/store/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n\n  const handleContactChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const submitForm = async e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    for (const el of contacts) {\n      if (el.name.toLowerCase() === contact.name.toLocaleLowerCase()) {\n        alert(`Контакт с таким именем уже существует`);\n        setName('');\n        setNumber('');\n        return;\n      }\n    }\n    await dispatch(operations.addContact(contact));\n    await dispatch(operations.getContacts());\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className={css.form__container}>\n      <form onSubmit={submitForm}>\n        <label>\n          <p className={css.input__description}>Name</p>\n          <input\n            className={css.form__input}\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Contact name\"\n            aria-label=\"Input for your name\"\n            value={name}\n            onChange={handleContactChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label>\n          <p className={css.input__description}>Number</p>\n          <input\n            className={css.form__input}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Phone number\"\n            value={number}\n            aria-label=\"Input for your phone number\"\n            onChange={handleContactChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <div>\n          <button type=\"submit\" className={css.add__button}>\n            Add contact\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport css from '../css/phonebook.module.css';\nimport { setFilter } from 'redux/store/contactsSlice';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  return (\n    <label className={css.filter__container}>\n      <p className={css.input__description}> Find contacts by name</p>\n      <input\n        className={css.filter__input}\n        type=\"filter\"\n        name=\"filter\"\n        placeholder=\"Find...\"\n        onChange={e => {\n          dispatch(setFilter({ text: e.target.value }));\n        }}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n    </label>\n  );\n}\n","import { useSelector } from 'react-redux';\nimport css from '../../components/css/phonebook.module.css';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport ContactForm from '../../components/Form/Form';\nimport Filter from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  return (\n    <div className={css.contact_container}>\n      <h1 className={css.form__title}>Phonebook</h1>\n      <ContactForm />\n      {contacts.length > 0 && <Filter />}\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["name","number","handleDeleteContact","id","className","css","type","onClick","dispatch","useDispatch","userName","useSelector","state","user","contacts","items","filter","useEffect","operation","visibleContacts","useMemo","toLowerCase","includes","map","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","call","step","next","_e2","useState","setName","setNumber","handleContactChange","currentTarget","submitForm","preventDefault","contact","toLocaleLowerCase","alert","operations","onSubmit","placeholder","onChange","pattern","title","required","Filter","setFilter","text","target"],"sourceRoot":""}